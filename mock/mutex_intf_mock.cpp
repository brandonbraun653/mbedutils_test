/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "../../mbedutils/include/mbedutils/interfaces/mutex_intf.hpp"

#include <CppUTestExt/MockSupport.h>

void mb::osal::initMutexDriver()
{
    mock().actualCall("mb::osal::initMutexDriver");
}

bool mb::osal::createMutex(mb::osal::mb_mutex_t & mutex)
{
    return mock().actualCall("mb::osal::createMutex").withPointerParameter("mutex", &mutex).returnBoolValue();
}

void mb::osal::destroyMutex(mb::osal::mb_mutex_t & mutex)
{
    mock().actualCall("mb::osal::destroyMutex").withPointerParameter("mutex", &mutex);
}

bool mb::osal::allocateMutex(mb::osal::mb_mutex_t & mutex)
{
    return mock().actualCall("mb::osal::allocateMutex").withPointerParameter("mutex", &mutex).returnBoolValue();
}

void mb::osal::deallocateMutex(mb::osal::mb_mutex_t & mutex)
{
    mock().actualCall("mb::osal::deallocateMutex").withPointerParameter("mutex", &mutex);
}

void mb::osal::lockMutex(mb::osal::mb_mutex_t mutex)
{
    mock().actualCall("mb::osal::lockMutex").withPointerParameter("mutex", mutex);
}

bool mb::osal::tryLockMutex(mb::osal::mb_mutex_t mutex)
{
    return mock().actualCall("mb::osal::tryLockMutex").withPointerParameter("mutex", mutex).returnBoolValue();
}

bool mb::osal::tryLockMutex(mb::osal::mb_mutex_t mutex, const size_t timeout)
{
    return mock().actualCall("mb::osal::tryLockMutex").withPointerParameter("mutex", mutex).withUnsignedLongIntParameter("timeout", timeout).returnBoolValue();
}

void mb::osal::unlockMutex(mb::osal::mb_mutex_t mutex)
{
    mock().actualCall("mb::osal::unlockMutex").withPointerParameter("mutex", mutex);
}

bool mb::osal::createRecursiveMutex(mb::osal::mb_recursive_mutex_t & mutex)
{
    return mock().actualCall("mb::osal::createRecursiveMutex").withPointerParameter("mutex", &mutex).returnBoolValue();
}

void mb::osal::destroyRecursiveMutex(mb::osal::mb_recursive_mutex_t & mutex)
{
    mock().actualCall("mb::osal::destroyRecursiveMutex").withPointerParameter("mutex", &mutex);
}

bool mb::osal::allocateRecursiveMutex(mb::osal::mb_recursive_mutex_t & mutex)
{
    return mock().actualCall("mb::osal::allocateRecursiveMutex").withPointerParameter("mutex", &mutex).returnBoolValue();
}

void mb::osal::lockRecursiveMutex(mb::osal::mb_recursive_mutex_t mutex)
{
    mock().actualCall("mb::osal::lockRecursiveMutex").withPointerParameter("mutex", mutex);
}

bool mb::osal::tryLockRecursiveMutex(mb::osal::mb_recursive_mutex_t mutex)
{
    return mock().actualCall("mb::osal::tryLockRecursiveMutex").withPointerParameter("mutex", mutex).returnBoolValue();
}

bool mb::osal::tryLockRecursiveMutex(mb::osal::mb_recursive_mutex_t mutex, const size_t timeout)
{
    return mock().actualCall("mb::osal::tryLockRecursiveMutex").withPointerParameter("mutex", mutex).withUnsignedLongIntParameter("timeout", timeout).returnBoolValue();
}

void mb::osal::unlockRecursiveMutex(mb::osal::mb_recursive_mutex_t mutex)
{
    mock().actualCall("mb::osal::unlockRecursiveMutex").withPointerParameter("mutex", mutex);
}

