/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "../../mbedutils/include/mbedutils/interfaces/thread_intf.hpp"

#include <CppUTestExt/MockSupport.h>

void mb::thread::intf::initialize()
{
    mock().actualCall("mb::thread::intf::initialize");
}

mb::thread::TaskHandle mb::thread::intf::create_task(const mb::thread::TaskConfig & cfg)
{
    return static_cast<mb::thread::TaskHandle>(mock().actualCall("mb::thread::intf::create_task").withParameterOfType("mb::thread::TaskConfig", "cfg", &cfg).returnPointerValue());
}

void mb::thread::intf::destroy_task(mb::thread::TaskHandle task)
{
    mock().actualCall("mb::thread::intf::destroy_task").withPointerParameter("task", task);
}

void mb::thread::intf::set_affinity(mb::thread::TaskHandle task, size_t coreId)
{
    mock().actualCall("mb::thread::intf::set_affinity").withPointerParameter("task", task).withUnsignedLongIntParameter("coreId", coreId);
}

void mb::thread::intf::start_scheduler()
{
    mock().actualCall("mb::thread::intf::start_scheduler");
}

void mb::thread::intf::on_stack_overflow()
{
    mock().actualCall("mb::thread::intf::on_stack_overflow");
}

void mb::thread::intf::on_malloc_failed()
{
    mock().actualCall("mb::thread::intf::on_malloc_failed");
}

void mb::thread::intf::on_idle()
{
    mock().actualCall("mb::thread::intf::on_idle");
}

void mb::thread::intf::on_tick()
{
    mock().actualCall("mb::thread::intf::on_tick");
}

