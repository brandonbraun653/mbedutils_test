/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "../../mbedutils/include/mbedutils/interfaces/smphr_intf.hpp"

#include <CppUTestExt/MockSupport.h>

void mb::osal::initSmphrDriver()
{
    mock().actualCall("mb::osal::initSmphrDriver");
}

bool mb::osal::createSmphr(mb::osal::mb_smphr_t & s, const size_t maxCount, const size_t initialCount)
{
    return mock().actualCall("mb::osal::createSmphr").withPointerParameter("s", &s).withUnsignedLongIntParameter("maxCount", maxCount).withUnsignedLongIntParameter("initialCount", initialCount).returnBoolValue();
}

void mb::osal::destroySmphr(mb::osal::mb_smphr_t & s)
{
    mock().actualCall("mb::osal::destroySmphr").withPointerParameter("s", &s);
}

bool mb::osal::allocateSemaphore(mb::osal::mb_smphr_t & s, const size_t maxCount, const size_t initialCount)
{
    return mock().actualCall("mb::osal::allocateSemaphore").withPointerParameter("s", &s).withUnsignedLongIntParameter("maxCount", maxCount).withUnsignedLongIntParameter("initialCount", initialCount).returnBoolValue();
}

void mb::osal::deallocateSemaphore(mb::osal::mb_smphr_t & s)
{
    mock().actualCall("mb::osal::deallocateSemaphore").withPointerParameter("s", &s);
}

size_t mb::osal::getSmphrAvailable(mb::osal::mb_smphr_t & s)
{
    return static_cast<size_t>(mock().actualCall("mb::osal::getSmphrAvailable").withPointerParameter("s", &s).returnUnsignedLongIntValue());
}

void mb::osal::releaseSmphr(mb::osal::mb_smphr_t & s)
{
    mock().actualCall("mb::osal::releaseSmphr").withPointerParameter("s", &s);
}

void mb::osal::releaseSmphrFromISR(mb::osal::mb_smphr_t & s)
{
    mock().actualCall("mb::osal::releaseSmphrFromISR").withPointerParameter("s", &s);
}

void mb::osal::acquireSmphr(mb::osal::mb_smphr_t & s)
{
    mock().actualCall("mb::osal::acquireSmphr").withPointerParameter("s", &s);
}

bool mb::osal::tryAcquireSmphr(mb::osal::mb_smphr_t & s)
{
    return mock().actualCall("mb::osal::tryAcquireSmphr").withPointerParameter("s", &s).returnBoolValue();
}

bool mb::osal::tryAcquireSmphr(mb::osal::mb_smphr_t & s, const size_t timeout)
{
    return mock().actualCall("mb::osal::tryAcquireSmphr").withPointerParameter("s", &s).withUnsignedLongIntParameter("timeout", timeout).returnBoolValue();
}

