/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "../../../mbedutils/include/mbedutils/drivers/threading/thread.hpp"

#include <CppUTestExt/MockSupport.h>

mb::thread::Task::Task() noexcept
{
    mock().actualCall("mb::thread::Task::Task");
}

mb::thread::Task::~Task()
{
    mock().actualCall("mb::thread::Task::~Task").onObject(this);
}

Task & mb::thread::Task::operator=(Task && other) noexcept
{
    return *static_cast<Task*>(mock().actualCall("mb::thread::Task::operator=").onObject(this).withOutputParameterOfType("Task", "other", &other).returnPointerValue());
}

mb::thread::Task::Task(const Task & _unnamedArg0)
{
    mock().actualCall("mb::thread::Task::Task").withParameterOfType("Task", "_unnamedArg0", &_unnamedArg0);
}

Task & mb::thread::Task::operator=(const Task & _unnamedArg0)
{
    return *static_cast<Task*>(mock().actualCall("mb::thread::Task::operator=").onObject(this).withParameterOfType("Task", "_unnamedArg0", &_unnamedArg0).returnPointerValue());
}

void mb::thread::Task::start()
{
    mock().actualCall("mb::thread::Task::start").onObject(this);
}

void mb::thread::Task::kill()
{
    mock().actualCall("mb::thread::Task::kill").onObject(this);
}

void mb::thread::Task::join()
{
    mock().actualCall("mb::thread::Task::join").onObject(this);
}

bool mb::thread::Task::joinable()
{
    return mock().actualCall("mb::thread::Task::joinable").onObject(this).returnBoolValue();
}

TaskId mb::thread::Task::id() const
{
    return static_cast<mb::thread::TaskId>(mock().actualCall("mb::thread::Task::id").onObject(this).returnUnsignedLongIntValue());
}

TaskName mb::thread::Task::name() const
{
    return *static_cast<const mb::thread::TaskName*>(mock().actualCall("mb::thread::Task::name").onObject(this).returnConstPointerValue());
}

TaskHandle mb::thread::Task::implementation() const
{
    return static_cast<mb::thread::TaskHandle>(mock().actualCall("mb::thread::Task::implementation").onObject(this).returnPointerValue());
}

::mb::thread::Task && mb::thread::create(const Task::Config & cfg)
{
    return std::move(*static_cast<::mb::thread::Task*>(mock().actualCall("mb::thread::create").withParameterOfType("Task::Config", "cfg", &cfg).returnPointerValue()));
}

void mb::thread::driver_setup(const Internal::ModuleConfig & cfg)
{
    mock().actualCall("mb::thread::driver_setup").withParameterOfType("Internal::ModuleConfig", "cfg", &cfg);
}

void mb::thread::driver_teardown()
{
    mock().actualCall("mb::thread::driver_teardown");
}

void mb::thread::startScheduler()
{
    mock().actualCall("mb::thread::startScheduler");
}

bool mb::thread::sendMessage(const TaskId id, Message & msg, const size_t timeout)
{
    return mock().actualCall("mb::thread::sendMessage").withUnsignedLongIntParameter("id", id).withOutputParameterOfType("Message", "msg", &msg).withUnsignedLongIntParameter("timeout", timeout).returnBoolValue();
}

void mb::thread::this_thread::set_name(const char * name)
{
    mock().actualCall("mb::thread::this_thread::set_name").withStringParameter("name", name);
}

TaskName & mb::thread::this_thread::get_name()
{
    return *static_cast<TaskName*>(mock().actualCall("mb::thread::this_thread::get_name").returnPointerValue());
}

void mb::thread::this_thread::sleep_for(const size_t timeout)
{
    mock().actualCall("mb::thread::this_thread::sleep_for").withUnsignedLongIntParameter("timeout", timeout);
}

void mb::thread::this_thread::sleep_until(const size_t wakeup)
{
    mock().actualCall("mb::thread::this_thread::sleep_until").withUnsignedLongIntParameter("wakeup", wakeup);
}

void mb::thread::this_thread::yield()
{
    mock().actualCall("mb::thread::this_thread::yield");
}

void mb::thread::this_thread::suspend()
{
    mock().actualCall("mb::thread::this_thread::suspend");
}

TaskId mb::thread::this_thread::id()
{
    return static_cast<mb::thread::TaskId>(mock().actualCall("mb::thread::this_thread::id").returnUnsignedLongIntValue());
}

bool mb::thread::this_thread::awaitMessage(Message & msg, const size_t timeout)
{
    return mock().actualCall("mb::thread::this_thread::awaitMessage").withOutputParameterOfType("Message", "msg", &msg).withUnsignedLongIntParameter("timeout", timeout).returnBoolValue();
}

bool mb::thread::this_thread::awaitMessage(Message & msg, MessagePredicate & predicate, const size_t timeout)
{
    return mock().actualCall("mb::thread::this_thread::awaitMessage").withOutputParameterOfType("Message", "msg", &msg).withOutputParameterOfType("MessagePredicate", "predicate", &predicate).withUnsignedLongIntParameter("timeout", timeout).returnBoolValue();
}

