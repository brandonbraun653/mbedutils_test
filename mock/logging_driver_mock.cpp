/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "../../../mbedutils/include/mbedutils/drivers/logging/logging_driver.hpp"

#include <CppUTestExt/MockSupport.h>

void mb::logging::initialize()
{
    mock().actualCall("mb::logging::initialize");
}

mb::logging::ErrCode mb::logging::setGlobalLogLevel(const mb::logging::Level level)
{
    return static_cast<mb::logging::ErrCode>(mock().actualCall("mb::logging::setGlobalLogLevel").withIntParameter("level", static_cast<int>(level)).returnIntValue());
}

mb::logging::ErrCode mb::logging::registerSink(mb::logging::SinkHandle_rPtr & sink)
{
    return static_cast<mb::logging::ErrCode>(mock().actualCall("mb::logging::registerSink").withPointerParameter("sink", &sink).returnIntValue());
}

mb::logging::ErrCode mb::logging::removeSink(mb::logging::SinkHandle_rPtr & sink)
{
    return static_cast<mb::logging::ErrCode>(mock().actualCall("mb::logging::removeSink").withPointerParameter("sink", &sink).returnIntValue());
}

mb::logging::ErrCode mb::logging::setRootSink(mb::logging::SinkHandle_rPtr & sink)
{
    return static_cast<mb::logging::ErrCode>(mock().actualCall("mb::logging::setRootSink").withPointerParameter("sink", &sink).returnIntValue());
}

mb::logging::SinkHandle_rPtr mb::logging::getRootSink()
{
    return static_cast<mb::logging::SinkHandle_rPtr>(mock().actualCall("mb::logging::getRootSink").returnPointerValue());
}

mb::logging::ErrCode mb::logging::log(const mb::logging::Level lvl, const void *const msg, const size_t length)
{
    return static_cast<mb::logging::ErrCode>(mock().actualCall("mb::logging::log").withIntParameter("lvl", static_cast<int>(lvl)).withConstPointerParameter("msg", msg).withUnsignedLongIntParameter("length", length).returnIntValue());
}

mb::logging::ErrCode mb::logging::flog(const mb::logging::Level lvl, const char *const file, const size_t line, const char * fmt, ... )
{
    return static_cast<mb::logging::ErrCode>(mock().actualCall("mb::logging::flog").withIntParameter("lvl", static_cast<int>(lvl)).withStringParameter("file", file).withUnsignedLongIntParameter("line", line).withStringParameter("fmt", fmt).returnIntValue());
}

