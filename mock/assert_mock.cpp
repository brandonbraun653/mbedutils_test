/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "../../mbedutils/include/mbedutils/assert.hpp"

#include <CppUTestExt/MockSupport.h>

void mb::assert::initialize()
{
    mock().actualCall("mb::assert::initialize");
}

size_t mb::assert::num_recurse_events()
{
    return static_cast<size_t>(mock().actualCall("mb::assert::num_recurse_events").returnUnsignedLongIntValue());
}

bool mb::assert::log_assert_failure(const bool predicate, const bool halt, const char *const file, const int line)
{
    return mock().actualCall("mb::assert::log_assert_failure").withBoolParameter("predicate", predicate).withBoolParameter("halt", halt).withStringParameter("file", file).withIntParameter("line", line).returnBoolValue();
}

bool mb::assert::format_and_log_assert_failure(const bool predicate, const bool halt, const char *const file, const int line, const char * fmt, ...)
{
    return mock().actualCall("mb::assert::format_and_log_assert_failure").withBoolParameter("predicate", predicate).withBoolParameter("halt", halt).withStringParameter("file", file).withIntParameter("line", line).withStringParameter("fmt", fmt).returnBoolValue();
}

