#------------------------------------------------------------------------------
# FUNCTION: create_test_target
#
#   Creates an executable target for a test case. This function is intended to
#   be used in the tests/CMakeLists.txt file to create test targets for the
#   various test cases in the project.
#
# INTERFACE:
#   TARGET
#       This is simply the name you want to reference the generated static
#       library target by.
#
#   TEST_SOURCES
#       The test driver source file. This is the file that contains the main entry point.
#
#   INSTRUMENTED_SOURCES
#       List of source files that should be instrumented for code coverage.
#
#   DEPENDENT_SOURCES
#       Any additional source files that are needed to build the test target. Not instrumented.
#
#   INCLUDE_DIRS
#       List of include directories needed to build the test.
#
#   DEFINES
#       Preprocessor definitions to apply to all sources.
#
#   LIBRARIES
#       List of libraries to link against.
#
#   EXPORT_DIR
#       Root directory of where to place the resulting generated <xyz>.cmake
#       files. This is so other targets in the project can actually reference
#       the targets generated by this function.
#
#------------------------------------------------------------------------------
function(create_test_target)
  #----------------------------------------------------------
  # Parse the input arguments
  #----------------------------------------------------------
  set(options "")
  set(oneValueArgs TARGET EXPORT_DIR)
  set(multiValueArgs TEST_SOURCES INSTRUMENTED_SOURCES DEPENDENT_SOURCES INCLUDE_DIRS DEFINES LIBRARIES)
  cmake_parse_arguments(TEST_EXE "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

  #----------------------------------------------------------
  # The name your project should reference
  #----------------------------------------------------------
  set(exe_target_name "${TEST_EXE_TARGET}")
  message("-- Generating test target: ${exe_target_name}")

  #----------------------------------------------------------
  # Create the instrumented library
  #----------------------------------------------------------
  add_library(${exe_target_name}_instrumented STATIC ${TEST_EXE_INSTRUMENTED_SOURCES})
  target_include_directories(${exe_target_name}_instrumented PRIVATE ${TEST_EXE_INCLUDE_DIRS})
  target_compile_options(${exe_target_name}_instrumented PRIVATE -fprofile-arcs -ftest-coverage --coverage -g -O0)
  target_link_options(${exe_target_name}_instrumented PRIVATE -fprofile-arcs -ftest-coverage)
  target_link_libraries(${exe_target_name}_instrumented PUBLIC gcov etl::etl CppUTest CppUTestExt)

  #----------------------------------------------------------
  # Create the interface library with the desired properties
  #----------------------------------------------------------
  add_executable(${exe_target_name} ${TEST_EXE_TEST_SOURCES} ${TEST_EXE_DEPENDENT_SOURCES})
  target_link_options(${exe_target_name} PRIVATE -Wl,--start-group)
  target_link_libraries(${exe_target_name} PRIVATE ${exe_target_name}_instrumented)

  # Include Paths
  if(TEST_EXE_INCLUDE_DIRS)
      target_include_directories(${exe_target_name} PRIVATE ${TEST_EXE_INCLUDE_DIRS})
      target_include_directories(${exe_target_name}_instrumented PRIVATE ${TEST_EXE_INCLUDE_DIRS})
  endif()

  # Compiler preprocessor definitions
  if(TEST_EXE_DEFINES)
      target_compile_definitions(${exe_target_name} PRIVATE ${TEST_EXE_DEFINES})
  endif()

  # Link Libraries
  if(TEST_EXE_LIBRARIES)
      target_link_libraries(${exe_target_name} PRIVATE ${TEST_EXE_LIBRARIES})
      target_link_libraries(${exe_target_name}_instrumented PRIVATE ${TEST_EXE_LIBRARIES})
  endif()

  # Export so other targets can use this
  if(NOT TEST_EXE_EXPORT_DIR)
      message(FATAL_ERROR "Static library generation function requires an EXPORT_DIR entry")
  endif()

  export(TARGETS ${exe_target_name} FILE "${TEST_EXE_EXPORT_DIR}/${exe_target_name}.cmake")

  # Add the test to the CMake test suite
  add_test(NAME ${exe_target_name} COMMAND ${exe_target_name})

endfunction() #create_test_target
