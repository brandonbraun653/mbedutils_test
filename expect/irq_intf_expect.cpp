/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "irq_intf_expect.hpp"

namespace expect { namespace mb$ { namespace irq$ {
MockExpectedCall& in_isr(bool __return__)
{
    return in_isr(1, __return__);
}
MockExpectedCall& in_isr(unsigned int __numCalls__, bool __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::irq::in_isr");
    __expectedCall__.andReturnValue(__return__);
    return __expectedCall__;
}
} } }

namespace expect { namespace mb$ { namespace irq$ {
MockExpectedCall& disable_interrupts()
{
    return disable_interrupts(1);
}
MockExpectedCall& disable_interrupts(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::irq::disable_interrupts");
    return __expectedCall__;
}
} } }

namespace expect { namespace mb$ { namespace irq$ {
MockExpectedCall& enable_interrupts()
{
    return enable_interrupts(1);
}
MockExpectedCall& enable_interrupts(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::irq::enable_interrupts");
    return __expectedCall__;
}
} } }

