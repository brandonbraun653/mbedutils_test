/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include <CppUMockGen.hpp>

#include "../../../mbedutils/include/mbedutils/interfaces/gpio_intf.hpp"

#include <CppUTestExt/MockSupport.h>

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& driver_setup();
MockExpectedCall& driver_setup(unsigned int __numCalls__);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& driver_teardown();
MockExpectedCall& driver_teardown(unsigned int __numCalls__);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& init(CppUMockGen::Parameter<const mb::hw::gpio::PinConfig &> config, bool __return__);
MockExpectedCall& init(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::gpio::PinConfig &> config, bool __return__);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& write(CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::State_t> state);
MockExpectedCall& write(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::State_t> state);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& toggle(CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin);
MockExpectedCall& toggle(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& read(CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, mb::hw::gpio::State_t __return__);
MockExpectedCall& read(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, mb::hw::gpio::State_t __return__);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& setAlternate(CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::Alternate_t> alternate);
MockExpectedCall& setAlternate(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::Alternate_t> alternate);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& setPull(CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::Pull_t> pull);
MockExpectedCall& setPull(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::Pull_t> pull);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& setDrive(CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::Drive_t> drive);
MockExpectedCall& setDrive(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::Drive_t> drive);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& setSpeed(CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::Speed_t> speed);
MockExpectedCall& setSpeed(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::Speed_t> speed);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& setMode(CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::Mode_t> mode);
MockExpectedCall& setMode(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::Mode_t> mode);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& attachInterrupt(CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::Trigger_t> trigger, CppUMockGen::Parameter<const mb::hw::gpio::Callback_t &> callback);
MockExpectedCall& attachInterrupt(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, CppUMockGen::Parameter<const mb::hw::gpio::Trigger_t> trigger, CppUMockGen::Parameter<const mb::hw::gpio::Callback_t &> callback);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& detachInterrupt(CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin);
MockExpectedCall& detachInterrupt(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace gpio$ { namespace intf$ {
MockExpectedCall& getInterruptLine(CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, uint32_t __return__);
MockExpectedCall& getInterruptLine(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::gpio::Port_t> port, CppUMockGen::Parameter<const mb::hw::gpio::Pin_t> pin, uint32_t __return__);
} } } } }

