/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "assert_intf_expect.hpp"

namespace expect { namespace mb$ { namespace assert$ {
MockExpectedCall& on_assert_fail(CppUMockGen::Parameter<const bool> halt, CppUMockGen::Parameter<const etl::string_view &> msg)
{
    return on_assert_fail(1, halt, msg);
}
MockExpectedCall& on_assert_fail(unsigned int __numCalls__, CppUMockGen::Parameter<const bool> halt, CppUMockGen::Parameter<const etl::string_view &> msg)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::assert::on_assert_fail");
    if(halt.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("halt", halt.getValue()); }
    if(msg.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withParameterOfType("etl::string_view", "msg", &msg.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } }

