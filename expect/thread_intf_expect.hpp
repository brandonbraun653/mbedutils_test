/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include <CppUMockGen.hpp>

#include "../../../mbedutils/include/mbedutils/interfaces/thread_intf.hpp"

#include <CppUTestExt/MockSupport.h>

namespace expect { namespace mb$ { namespace thread$ { namespace intf$ {
MockExpectedCall& driver_setup();
MockExpectedCall& driver_setup(unsigned int __numCalls__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace intf$ {
MockExpectedCall& driver_teardown();
MockExpectedCall& driver_teardown(unsigned int __numCalls__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace intf$ {
MockExpectedCall& create_task(CppUMockGen::Parameter<const mb::thread::Task::Config &> cfg, mb::thread::TaskHandle __return__);
MockExpectedCall& create_task(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::thread::Task::Config &> cfg, mb::thread::TaskHandle __return__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace intf$ {
MockExpectedCall& destroy_task(CppUMockGen::Parameter<mb::thread::TaskHandle> task);
MockExpectedCall& destroy_task(unsigned int __numCalls__, CppUMockGen::Parameter<mb::thread::TaskHandle> task);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace intf$ {
MockExpectedCall& set_affinity(CppUMockGen::Parameter<mb::thread::TaskHandle> task, CppUMockGen::Parameter<size_t> coreId);
MockExpectedCall& set_affinity(unsigned int __numCalls__, CppUMockGen::Parameter<mb::thread::TaskHandle> task, CppUMockGen::Parameter<size_t> coreId);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace intf$ {
MockExpectedCall& start_scheduler();
MockExpectedCall& start_scheduler(unsigned int __numCalls__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace intf$ {
MockExpectedCall& on_stack_overflow();
MockExpectedCall& on_stack_overflow(unsigned int __numCalls__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace intf$ {
MockExpectedCall& on_malloc_failed();
MockExpectedCall& on_malloc_failed(unsigned int __numCalls__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace intf$ {
MockExpectedCall& on_idle();
MockExpectedCall& on_idle(unsigned int __numCalls__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace intf$ {
MockExpectedCall& on_tick();
MockExpectedCall& on_tick(unsigned int __numCalls__);
} } } }

