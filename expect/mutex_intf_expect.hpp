/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include <CppUMockGen.hpp>

#include "../../mbedutils/include/mbedutils/interfaces/mutex_intf.hpp"

#include <CppUTestExt/MockSupport.h>

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& initMutexDriver();
MockExpectedCall& initMutexDriver(unsigned int __numCalls__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& createMutex(CppUMockGen::Parameter<mb::osal::mb_mutex_t &> mutex, bool __return__);
MockExpectedCall& createMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_mutex_t &> mutex, bool __return__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& destroyMutex(CppUMockGen::Parameter<mb::osal::mb_mutex_t &> mutex);
MockExpectedCall& destroyMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_mutex_t &> mutex);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& allocateMutex(CppUMockGen::Parameter<mb::osal::mb_mutex_t &> mutex, bool __return__);
MockExpectedCall& allocateMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_mutex_t &> mutex, bool __return__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& deallocateMutex(CppUMockGen::Parameter<mb::osal::mb_mutex_t &> mutex);
MockExpectedCall& deallocateMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_mutex_t &> mutex);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& lockMutex(CppUMockGen::Parameter<mb::osal::mb_mutex_t> mutex);
MockExpectedCall& lockMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_mutex_t> mutex);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& tryLockMutex(CppUMockGen::Parameter<mb::osal::mb_mutex_t> mutex, bool __return__);
MockExpectedCall& tryLockMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_mutex_t> mutex, bool __return__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& tryLockMutex(CppUMockGen::Parameter<mb::osal::mb_mutex_t> mutex, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
MockExpectedCall& tryLockMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_mutex_t> mutex, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& unlockMutex(CppUMockGen::Parameter<mb::osal::mb_mutex_t> mutex);
MockExpectedCall& unlockMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_mutex_t> mutex);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& createRecursiveMutex(CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t &> mutex, bool __return__);
MockExpectedCall& createRecursiveMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t &> mutex, bool __return__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& destroyRecursiveMutex(CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t &> mutex);
MockExpectedCall& destroyRecursiveMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t &> mutex);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& allocateRecursiveMutex(CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t &> mutex, bool __return__);
MockExpectedCall& allocateRecursiveMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t &> mutex, bool __return__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& lockRecursiveMutex(CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t> mutex);
MockExpectedCall& lockRecursiveMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t> mutex);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& tryLockRecursiveMutex(CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t> mutex, bool __return__);
MockExpectedCall& tryLockRecursiveMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t> mutex, bool __return__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& tryLockRecursiveMutex(CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t> mutex, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
MockExpectedCall& tryLockRecursiveMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t> mutex, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& unlockRecursiveMutex(CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t> mutex);
MockExpectedCall& unlockRecursiveMutex(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_recursive_mutex_t> mutex);
} } }

