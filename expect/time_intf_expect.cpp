/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "time_intf_expect.hpp"

namespace expect { namespace mb$ { namespace time$ {
MockExpectedCall& millis(size_t __return__)
{
    return millis(1, __return__);
}
MockExpectedCall& millis(unsigned int __numCalls__, size_t __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::time::millis");
    __expectedCall__.andReturnValue(static_cast<unsigned long>(__return__));
    return __expectedCall__;
}
} } }

namespace expect { namespace mb$ { namespace time$ {
MockExpectedCall& micros(size_t __return__)
{
    return micros(1, __return__);
}
MockExpectedCall& micros(unsigned int __numCalls__, size_t __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::time::micros");
    __expectedCall__.andReturnValue(static_cast<unsigned long>(__return__));
    return __expectedCall__;
}
} } }

namespace expect { namespace mb$ { namespace time$ {
MockExpectedCall& delayMilliseconds(CppUMockGen::Parameter<const size_t> val)
{
    return delayMilliseconds(1, val);
}
MockExpectedCall& delayMilliseconds(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> val)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::time::delayMilliseconds");
    if(val.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("val", val.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } }

namespace expect { namespace mb$ { namespace time$ {
MockExpectedCall& delayMicroseconds(CppUMockGen::Parameter<const size_t> val)
{
    return delayMicroseconds(1, val);
}
MockExpectedCall& delayMicroseconds(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> val)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::time::delayMicroseconds");
    if(val.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("val", val.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } }

