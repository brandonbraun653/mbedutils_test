/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "nor_flash_expect.hpp"

namespace expect { namespace mb$ { namespace memory$ { namespace nor$ { namespace DeviceDriver$ {
MockExpectedCall& DeviceDriver$ctor()
{
    return DeviceDriver$ctor(1);
}
MockExpectedCall& DeviceDriver$ctor(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::memory::nor::DeviceDriver::DeviceDriver");
    return __expectedCall__;
}
} } } } }

namespace expect { namespace mb$ { namespace memory$ { namespace nor$ { namespace DeviceDriver$ {
MockExpectedCall& DeviceDriver$dtor(CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__)
{
    return DeviceDriver$dtor(1, __object__);
}
MockExpectedCall& DeviceDriver$dtor(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::memory::nor::DeviceDriver::~DeviceDriver");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<mb::memory::nor::DeviceDriver*>(__object__.getValue())); }
    return __expectedCall__;
}
} } } } }

namespace expect { namespace mb$ { namespace memory$ { namespace nor$ { namespace DeviceDriver$ {
MockExpectedCall& write(CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const size_t> block_idx, CppUMockGen::Parameter<const size_t> offset, CppUMockGen::Parameter<const void *const> data, CppUMockGen::Parameter<const size_t> length, mb::memory::Status __return__)
{
    return write(1, __object__, block_idx, offset, data, length, __return__);
}
MockExpectedCall& write(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const size_t> block_idx, CppUMockGen::Parameter<const size_t> offset, CppUMockGen::Parameter<const void *const> data, CppUMockGen::Parameter<const size_t> length, mb::memory::Status __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::memory::nor::DeviceDriver::write");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<mb::memory::nor::DeviceDriver*>(__object__.getValue())); }
    if(block_idx.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("block_idx", block_idx.getValue()); }
    if(offset.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("offset", offset.getValue()); }
    if(data.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withConstPointerParameter("data", data.getValue()); }
    if(length.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("length", length.getValue()); }
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } } }

namespace expect { namespace mb$ { namespace memory$ { namespace nor$ { namespace DeviceDriver$ {
MockExpectedCall& write(CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const uint64_t> address, CppUMockGen::Parameter<const void *const> data, CppUMockGen::Parameter<const size_t> length, mb::memory::Status __return__)
{
    return write(1, __object__, address, data, length, __return__);
}
MockExpectedCall& write(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const uint64_t> address, CppUMockGen::Parameter<const void *const> data, CppUMockGen::Parameter<const size_t> length, mb::memory::Status __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::memory::nor::DeviceDriver::write");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<mb::memory::nor::DeviceDriver*>(__object__.getValue())); }
    if(address.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("address", address.getValue()); }
    if(data.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withConstPointerParameter("data", data.getValue()); }
    if(length.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("length", length.getValue()); }
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } } }

namespace expect { namespace mb$ { namespace memory$ { namespace nor$ { namespace DeviceDriver$ {
MockExpectedCall& read(CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const size_t> block_idx, CppUMockGen::Parameter<const size_t> offset, CppUMockGen::Parameter<void *const> data, CppUMockGen::Parameter<const size_t> length, mb::memory::Status __return__)
{
    return read(1, __object__, block_idx, offset, data, length, __return__);
}
MockExpectedCall& read(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const size_t> block_idx, CppUMockGen::Parameter<const size_t> offset, CppUMockGen::Parameter<void *const> data, CppUMockGen::Parameter<const size_t> length, mb::memory::Status __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::memory::nor::DeviceDriver::read");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<mb::memory::nor::DeviceDriver*>(__object__.getValue())); }
    if(block_idx.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("block_idx", block_idx.getValue()); }
    if(offset.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("offset", offset.getValue()); }
    if(data.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withPointerParameter("data", data.getValue()); }
    if(length.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("length", length.getValue()); }
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } } }

namespace expect { namespace mb$ { namespace memory$ { namespace nor$ { namespace DeviceDriver$ {
MockExpectedCall& read(CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const uint64_t> address, CppUMockGen::Parameter<void *const> data, CppUMockGen::Parameter<const size_t> length, mb::memory::Status __return__)
{
    return read(1, __object__, address, data, length, __return__);
}
MockExpectedCall& read(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const uint64_t> address, CppUMockGen::Parameter<void *const> data, CppUMockGen::Parameter<const size_t> length, mb::memory::Status __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::memory::nor::DeviceDriver::read");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<mb::memory::nor::DeviceDriver*>(__object__.getValue())); }
    if(address.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("address", address.getValue()); }
    if(data.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withPointerParameter("data", data.getValue()); }
    if(length.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("length", length.getValue()); }
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } } }

namespace expect { namespace mb$ { namespace memory$ { namespace nor$ { namespace DeviceDriver$ {
MockExpectedCall& erase(CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const uint64_t> address, CppUMockGen::Parameter<const size_t> size, mb::memory::Status __return__)
{
    return erase(1, __object__, address, size, __return__);
}
MockExpectedCall& erase(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const uint64_t> address, CppUMockGen::Parameter<const size_t> size, mb::memory::Status __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::memory::nor::DeviceDriver::erase");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<mb::memory::nor::DeviceDriver*>(__object__.getValue())); }
    if(address.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("address", address.getValue()); }
    if(size.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("size", size.getValue()); }
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } } }

namespace expect { namespace mb$ { namespace memory$ { namespace nor$ { namespace DeviceDriver$ {
MockExpectedCall& erase(CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const size_t> block_idx, mb::memory::Status __return__)
{
    return erase(1, __object__, block_idx, __return__);
}
MockExpectedCall& erase(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const size_t> block_idx, mb::memory::Status __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::memory::nor::DeviceDriver::erase");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<mb::memory::nor::DeviceDriver*>(__object__.getValue())); }
    if(block_idx.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("block_idx", block_idx.getValue()); }
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } } }

namespace expect { namespace mb$ { namespace memory$ { namespace nor$ { namespace DeviceDriver$ {
MockExpectedCall& erase(CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, mb::memory::Status __return__)
{
    return erase(1, __object__, __return__);
}
MockExpectedCall& erase(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, mb::memory::Status __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::memory::nor::DeviceDriver::erase");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<mb::memory::nor::DeviceDriver*>(__object__.getValue())); }
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    return __expectedCall__;
}
} } } } }

namespace expect { namespace mb$ { namespace memory$ { namespace nor$ { namespace DeviceDriver$ {
MockExpectedCall& flush(CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, mb::memory::Status __return__)
{
    return flush(1, __object__, __return__);
}
MockExpectedCall& flush(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, mb::memory::Status __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::memory::nor::DeviceDriver::flush");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<mb::memory::nor::DeviceDriver*>(__object__.getValue())); }
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    return __expectedCall__;
}
} } } } }

namespace expect { namespace mb$ { namespace memory$ { namespace nor$ { namespace DeviceDriver$ {
MockExpectedCall& open(CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const mb::memory::nor::DeviceConfig &> cfg)
{
    return open(1, __object__, cfg);
}
MockExpectedCall& open(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const mb::memory::nor::DeviceConfig &> cfg)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::memory::nor::DeviceDriver::open");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<mb::memory::nor::DeviceDriver*>(__object__.getValue())); }
    if(cfg.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withParameterOfType("mb::memory::nor::DeviceConfig", "cfg", &cfg.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } } }

namespace expect { namespace mb$ { namespace memory$ { namespace nor$ { namespace DeviceDriver$ {
MockExpectedCall& close(CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__)
{
    return close(1, __object__);
}
MockExpectedCall& close(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::memory::nor::DeviceDriver::close");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<mb::memory::nor::DeviceDriver*>(__object__.getValue())); }
    return __expectedCall__;
}
} } } } }

namespace expect { namespace mb$ { namespace memory$ { namespace nor$ { namespace DeviceDriver$ {
MockExpectedCall& transfer(CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const void *const> cmd, CppUMockGen::Parameter<void *const> output, CppUMockGen::Parameter<const size_t> size, mb::memory::Status __return__)
{
    return transfer(1, __object__, cmd, output, size, __return__);
}
MockExpectedCall& transfer(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::memory::nor::DeviceDriver*> __object__, CppUMockGen::Parameter<const void *const> cmd, CppUMockGen::Parameter<void *const> output, CppUMockGen::Parameter<const size_t> size, mb::memory::Status __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::memory::nor::DeviceDriver::transfer");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<mb::memory::nor::DeviceDriver*>(__object__.getValue())); }
    if(cmd.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withConstPointerParameter("cmd", cmd.getValue()); }
    if(output.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withPointerParameter("output", output.getValue()); }
    if(size.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("size", size.getValue()); }
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } } }

