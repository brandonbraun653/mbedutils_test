/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "cmn_intf_expect.hpp"

namespace expect { namespace mb$ { namespace hw$ {
MockExpectedCall& max_drivers(CppUMockGen::Parameter<const mb::hw::Driver> driver, size_t __return__)
{
    return max_drivers(1, driver, __return__);
}
MockExpectedCall& max_drivers(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::Driver> driver, size_t __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::hw::max_drivers");
    if(driver.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("driver", static_cast<int>(driver.getValue())); }
    __expectedCall__.andReturnValue(static_cast<unsigned long>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } }

namespace expect { namespace mb$ { namespace hw$ {
MockExpectedCall& max_driver_index(CppUMockGen::Parameter<const mb::hw::Driver> driver, size_t __return__)
{
    return max_driver_index(1, driver, __return__);
}
MockExpectedCall& max_driver_index(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::Driver> driver, size_t __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::hw::max_driver_index");
    if(driver.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("driver", static_cast<int>(driver.getValue())); }
    __expectedCall__.andReturnValue(static_cast<unsigned long>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } }

namespace expect { namespace mb$ { namespace hw$ {
MockExpectedCall& is_driver_available(CppUMockGen::Parameter<const mb::hw::Driver> driver, CppUMockGen::Parameter<const size_t> channel, bool __return__)
{
    return is_driver_available(1, driver, channel, __return__);
}
MockExpectedCall& is_driver_available(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::Driver> driver, CppUMockGen::Parameter<const size_t> channel, bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::hw::is_driver_available");
    if(driver.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("driver", static_cast<int>(driver.getValue())); }
    if(channel.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("channel", channel.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } }

