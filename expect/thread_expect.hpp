/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include <CppUMockGen.hpp>

#include "../../../mbedutils/include/mbedutils/drivers/threading/thread.hpp"

#include <CppUTestExt/MockSupport.h>

namespace expect { namespace mb$ { namespace thread$ { namespace Task$ {
MockExpectedCall& Task$ctor();
MockExpectedCall& Task$ctor(unsigned int __numCalls__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace Task$ {
MockExpectedCall& Task$dtor(CppUMockGen::Parameter<const mb::thread::Task*> __object__ = ::CppUMockGen::IgnoreParameter::YES);
MockExpectedCall& Task$dtor(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::thread::Task*> __object__ = ::CppUMockGen::IgnoreParameter::YES);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace Task$ {
MockExpectedCall& operator=(CppUMockGen::Parameter<const mb::thread::Task*> __object__, Task & other, Task & __return__);
MockExpectedCall& operator=(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::thread::Task*> __object__, Task & other, Task & __return__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace Task$ {
MockExpectedCall& Task$ctor(CppUMockGen::Parameter<const Task &> _unnamedArg0);
MockExpectedCall& Task$ctor(unsigned int __numCalls__, CppUMockGen::Parameter<const Task &> _unnamedArg0);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace Task$ {
MockExpectedCall& operator=(CppUMockGen::Parameter<const mb::thread::Task*> __object__, CppUMockGen::Parameter<const Task &> _unnamedArg0, Task & __return__);
MockExpectedCall& operator=(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::thread::Task*> __object__, CppUMockGen::Parameter<const Task &> _unnamedArg0, Task & __return__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace Task$ {
MockExpectedCall& start(CppUMockGen::Parameter<const mb::thread::Task*> __object__);
MockExpectedCall& start(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::thread::Task*> __object__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace Task$ {
MockExpectedCall& kill(CppUMockGen::Parameter<const mb::thread::Task*> __object__);
MockExpectedCall& kill(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::thread::Task*> __object__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace Task$ {
MockExpectedCall& join(CppUMockGen::Parameter<const mb::thread::Task*> __object__);
MockExpectedCall& join(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::thread::Task*> __object__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace Task$ {
MockExpectedCall& joinable(CppUMockGen::Parameter<const mb::thread::Task*> __object__, bool __return__);
MockExpectedCall& joinable(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::thread::Task*> __object__, bool __return__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace Task$ {
MockExpectedCall& id(CppUMockGen::Parameter<const mb::thread::Task*> __object__, TaskId __return__);
MockExpectedCall& id(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::thread::Task*> __object__, TaskId __return__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace Task$ {
MockExpectedCall& name(CppUMockGen::Parameter<const mb::thread::Task*> __object__, TaskName &__return__);
MockExpectedCall& name(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::thread::Task*> __object__, TaskName &__return__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace Task$ {
MockExpectedCall& implementation(CppUMockGen::Parameter<const mb::thread::Task*> __object__, TaskHandle __return__);
MockExpectedCall& implementation(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::thread::Task*> __object__, TaskHandle __return__);
} } } }

namespace expect { namespace mb$ { namespace thread$ {
MockExpectedCall& create(CppUMockGen::Parameter<const Task::Config &> cfg, ::mb::thread::Task & __return__);
MockExpectedCall& create(unsigned int __numCalls__, CppUMockGen::Parameter<const Task::Config &> cfg, ::mb::thread::Task & __return__);
} } }

namespace expect { namespace mb$ { namespace thread$ {
MockExpectedCall& driver_setup(CppUMockGen::Parameter<const Internal::ModuleConfig &> cfg);
MockExpectedCall& driver_setup(unsigned int __numCalls__, CppUMockGen::Parameter<const Internal::ModuleConfig &> cfg);
} } }

namespace expect { namespace mb$ { namespace thread$ {
MockExpectedCall& driver_teardown();
MockExpectedCall& driver_teardown(unsigned int __numCalls__);
} } }

namespace expect { namespace mb$ { namespace thread$ {
MockExpectedCall& startScheduler();
MockExpectedCall& startScheduler(unsigned int __numCalls__);
} } }

namespace expect { namespace mb$ { namespace thread$ {
MockExpectedCall& sendMessage(CppUMockGen::Parameter<const TaskId> id, Message & msg, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
MockExpectedCall& sendMessage(unsigned int __numCalls__, CppUMockGen::Parameter<const TaskId> id, Message & msg, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
} } }

namespace expect { namespace mb$ { namespace thread$ { namespace this_thread$ {
MockExpectedCall& set_name(CppUMockGen::Parameter<const char *> name);
MockExpectedCall& set_name(unsigned int __numCalls__, CppUMockGen::Parameter<const char *> name);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace this_thread$ {
MockExpectedCall& get_name(TaskName & __return__);
MockExpectedCall& get_name(unsigned int __numCalls__, TaskName & __return__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace this_thread$ {
MockExpectedCall& sleep_for(CppUMockGen::Parameter<const size_t> timeout);
MockExpectedCall& sleep_for(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> timeout);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace this_thread$ {
MockExpectedCall& sleep_until(CppUMockGen::Parameter<const size_t> wakeup);
MockExpectedCall& sleep_until(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> wakeup);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace this_thread$ {
MockExpectedCall& yield();
MockExpectedCall& yield(unsigned int __numCalls__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace this_thread$ {
MockExpectedCall& suspend();
MockExpectedCall& suspend(unsigned int __numCalls__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace this_thread$ {
MockExpectedCall& id(TaskId __return__);
MockExpectedCall& id(unsigned int __numCalls__, TaskId __return__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace this_thread$ {
MockExpectedCall& awaitMessage(Message & msg, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
MockExpectedCall& awaitMessage(unsigned int __numCalls__, Message & msg, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
} } } }

namespace expect { namespace mb$ { namespace thread$ { namespace this_thread$ {
MockExpectedCall& awaitMessage(Message & msg, MessagePredicate & predicate, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
MockExpectedCall& awaitMessage(unsigned int __numCalls__, Message & msg, MessagePredicate & predicate, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
} } } }

