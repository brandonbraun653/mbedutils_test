/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include <CppUMockGen.hpp>

#include "../../mbedutils/include/mbedutils/interfaces/smphr_intf.hpp"

#include <CppUTestExt/MockSupport.h>

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& initSmphrDriver();
MockExpectedCall& initSmphrDriver(unsigned int __numCalls__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& createSmphr(CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s, CppUMockGen::Parameter<const size_t> maxCount, CppUMockGen::Parameter<const size_t> initialCount, bool __return__);
MockExpectedCall& createSmphr(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s, CppUMockGen::Parameter<const size_t> maxCount, CppUMockGen::Parameter<const size_t> initialCount, bool __return__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& destroySmphr(CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s);
MockExpectedCall& destroySmphr(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& allocateSemaphore(CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s, CppUMockGen::Parameter<const size_t> maxCount, CppUMockGen::Parameter<const size_t> initialCount, bool __return__);
MockExpectedCall& allocateSemaphore(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s, CppUMockGen::Parameter<const size_t> maxCount, CppUMockGen::Parameter<const size_t> initialCount, bool __return__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& deallocateSemaphore(CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s);
MockExpectedCall& deallocateSemaphore(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& getSmphrAvailable(CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s, size_t __return__);
MockExpectedCall& getSmphrAvailable(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s, size_t __return__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& releaseSmphr(CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s);
MockExpectedCall& releaseSmphr(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& releaseSmphrFromISR(CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s);
MockExpectedCall& releaseSmphrFromISR(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& acquireSmphr(CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s);
MockExpectedCall& acquireSmphr(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& tryAcquireSmphr(CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s, bool __return__);
MockExpectedCall& tryAcquireSmphr(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s, bool __return__);
} } }

namespace expect { namespace mb$ { namespace osal$ {
MockExpectedCall& tryAcquireSmphr(CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
MockExpectedCall& tryAcquireSmphr(unsigned int __numCalls__, CppUMockGen::Parameter<mb::osal::mb_smphr_t &> s, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
} } }

