/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "atexit_expect.hpp"

namespace expect { namespace mb$ { namespace system$ { namespace atexit$ {
MockExpectedCall& initialize()
{
    return initialize(1);
}
MockExpectedCall& initialize(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::system::atexit::initialize");
    return __expectedCall__;
}
} } } }

namespace expect { namespace mb$ { namespace system$ { namespace atexit$ {
MockExpectedCall& registerCallback(mb::system::atexit::Callback & callback, CppUMockGen::Parameter<uint32_t> priority, bool __return__)
{
    return registerCallback(1, callback, priority, __return__);
}
MockExpectedCall& registerCallback(unsigned int __numCalls__, mb::system::atexit::Callback & callback, CppUMockGen::Parameter<uint32_t> priority, bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::system::atexit::registerCallback");
    __expectedCall__.withOutputParameterOfTypeReturning("mb::system::atexit::Callback", "callback", &callback);
    if(priority.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("priority", priority.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } } }

namespace expect { namespace mb$ { namespace system$ { namespace atexit$ {
MockExpectedCall& unregisterCallback(mb::system::atexit::Callback & callback, bool __return__)
{
    return unregisterCallback(1, callback, __return__);
}
MockExpectedCall& unregisterCallback(unsigned int __numCalls__, mb::system::atexit::Callback & callback, bool __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::system::atexit::unregisterCallback");
    __expectedCall__.withOutputParameterOfTypeReturning("mb::system::atexit::Callback", "callback", &callback);
    __expectedCall__.andReturnValue(__return__);
    return __expectedCall__;
}
} } } }

namespace expect { namespace mb$ { namespace system$ { namespace atexit$ {
MockExpectedCall& exit()
{
    return exit(1);
}
MockExpectedCall& exit(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::system::atexit::exit");
    return __expectedCall__;
}
} } } }

