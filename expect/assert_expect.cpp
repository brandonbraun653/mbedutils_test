/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include "assert_expect.hpp"

namespace expect { namespace mb$ { namespace assert$ {
MockExpectedCall& initialize()
{
    return initialize(1);
}
MockExpectedCall& initialize(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::assert::initialize");
    return __expectedCall__;
}
} } }

namespace expect { namespace mb$ { namespace assert$ {
MockExpectedCall& num_recurse_events(size_t __return__)
{
    return num_recurse_events(1, __return__);
}
MockExpectedCall& num_recurse_events(unsigned int __numCalls__, size_t __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::assert::num_recurse_events");
    __expectedCall__.andReturnValue(static_cast<unsigned long>(__return__));
    return __expectedCall__;
}
} } }

namespace expect { namespace mb$ { namespace assert$ {
MockExpectedCall& log_assert_failure(CppUMockGen::Parameter<const bool> predicate, CppUMockGen::Parameter<const bool> halt, CppUMockGen::Parameter<const char *const> file, CppUMockGen::Parameter<const int> line, bool __return__)
{
    return log_assert_failure(1, predicate, halt, file, line, __return__);
}
MockExpectedCall& log_assert_failure(unsigned int __numCalls__, CppUMockGen::Parameter<const bool> predicate, CppUMockGen::Parameter<const bool> halt, CppUMockGen::Parameter<const char *const> file, CppUMockGen::Parameter<const int> line, bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::assert::log_assert_failure");
    if(predicate.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("predicate", predicate.getValue()); }
    if(halt.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("halt", halt.getValue()); }
    if(file.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withStringParameter("file", file.getValue()); }
    if(line.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("line", line.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } }

namespace expect { namespace mb$ { namespace assert$ {
MockExpectedCall& format_and_log_assert_failure(CppUMockGen::Parameter<const bool> predicate, CppUMockGen::Parameter<const bool> halt, CppUMockGen::Parameter<const char *const> file, CppUMockGen::Parameter<const int> line, CppUMockGen::Parameter<const char *> fmt, bool __return__)
{
    return format_and_log_assert_failure(1, predicate, halt, file, line, fmt, __return__);
}
MockExpectedCall& format_and_log_assert_failure(unsigned int __numCalls__, CppUMockGen::Parameter<const bool> predicate, CppUMockGen::Parameter<const bool> halt, CppUMockGen::Parameter<const char *const> file, CppUMockGen::Parameter<const int> line, CppUMockGen::Parameter<const char *> fmt, bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "mb::assert::format_and_log_assert_failure");
    if(predicate.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("predicate", predicate.getValue()); }
    if(halt.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("halt", halt.getValue()); }
    if(file.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withStringParameter("file", file.getValue()); }
    if(line.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("line", line.getValue()); }
    if(fmt.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withStringParameter("fmt", fmt.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} } }

