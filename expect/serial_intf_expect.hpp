/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include <CppUMockGen.hpp>

#include "../../mbedutils/include/mbedutils/interfaces/serial_intf.hpp"

#include <CppUTestExt/MockSupport.h>

namespace expect { namespace mb$ { namespace hw$ { namespace serial$ { namespace intf$ {
MockExpectedCall& lock(CppUMockGen::Parameter<const size_t> channel, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
MockExpectedCall& lock(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> channel, CppUMockGen::Parameter<const size_t> timeout, bool __return__);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace serial$ { namespace intf$ {
MockExpectedCall& unlock(CppUMockGen::Parameter<const size_t> channel);
MockExpectedCall& unlock(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> channel);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace serial$ { namespace intf$ {
MockExpectedCall& flush(CppUMockGen::Parameter<const size_t> channel);
MockExpectedCall& flush(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> channel);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace serial$ { namespace intf$ {
MockExpectedCall& disable_interrupts(CppUMockGen::Parameter<const size_t> channel);
MockExpectedCall& disable_interrupts(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> channel);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace serial$ { namespace intf$ {
MockExpectedCall& enable_interrupts(CppUMockGen::Parameter<const size_t> channel);
MockExpectedCall& enable_interrupts(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> channel);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace serial$ { namespace intf$ {
MockExpectedCall& write_async(CppUMockGen::Parameter<const size_t> channel, CppUMockGen::Parameter<const void *> data, CppUMockGen::Parameter<const size_t> length, int __return__);
MockExpectedCall& write_async(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> channel, CppUMockGen::Parameter<const void *> data, CppUMockGen::Parameter<const size_t> length, int __return__);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace serial$ { namespace intf$ {
MockExpectedCall& on_tx_complete(CppUMockGen::Parameter<const size_t> channel, CppUMockGen::Parameter<mb::hw::serial::intf::TXCompleteCallback&> callback);
MockExpectedCall& on_tx_complete(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> channel, CppUMockGen::Parameter<mb::hw::serial::intf::TXCompleteCallback&> callback);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace serial$ { namespace intf$ {
MockExpectedCall& write_abort(CppUMockGen::Parameter<const size_t> channel);
MockExpectedCall& write_abort(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> channel);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace serial$ { namespace intf$ {
MockExpectedCall& read_async(CppUMockGen::Parameter<const size_t> channel, CppUMockGen::Parameter<void *> data, CppUMockGen::Parameter<const size_t> length, CppUMockGen::Parameter<const size_t> timeout, int __return__);
MockExpectedCall& read_async(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> channel, CppUMockGen::Parameter<void *> data, CppUMockGen::Parameter<const size_t> length, CppUMockGen::Parameter<const size_t> timeout, int __return__);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace serial$ { namespace intf$ {
MockExpectedCall& on_rx_complete(CppUMockGen::Parameter<const size_t> channel, CppUMockGen::Parameter<mb::hw::serial::intf::RXCompleteCallback&> callback);
MockExpectedCall& on_rx_complete(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> channel, CppUMockGen::Parameter<mb::hw::serial::intf::RXCompleteCallback&> callback);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace serial$ { namespace intf$ {
MockExpectedCall& read_abort(CppUMockGen::Parameter<const size_t> channel);
MockExpectedCall& read_abort(unsigned int __numCalls__, CppUMockGen::Parameter<const size_t> channel);
} } } } }

