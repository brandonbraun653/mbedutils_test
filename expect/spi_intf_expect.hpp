/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 *
 * Generation options: -s c++20
 */

#include <CppUMockGen.hpp>

#include "../../mbedutils/include/mbedutils/interfaces/spi_intf.hpp"

#include <CppUTestExt/MockSupport.h>

namespace expect { namespace mb$ { namespace hw$ { namespace spi$ { namespace intf$ {
MockExpectedCall& init(CppUMockGen::Parameter<const mb::hw::spi::SpiConfig &> config);
MockExpectedCall& init(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::spi::SpiConfig &> config);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace spi$ { namespace intf$ {
MockExpectedCall& deinit(CppUMockGen::Parameter<const mb::hw::spi::Port_t> port);
MockExpectedCall& deinit(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::spi::Port_t> port);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace spi$ { namespace intf$ {
MockExpectedCall& write(CppUMockGen::Parameter<const mb::hw::spi::Port_t> port, CppUMockGen::Parameter<const void *const> data, CppUMockGen::Parameter<const size_t> length);
MockExpectedCall& write(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::spi::Port_t> port, CppUMockGen::Parameter<const void *const> data, CppUMockGen::Parameter<const size_t> length);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace spi$ { namespace intf$ {
MockExpectedCall& read(CppUMockGen::Parameter<const mb::hw::spi::Port_t> port, CppUMockGen::Parameter<void *const> data, CppUMockGen::Parameter<const size_t> length);
MockExpectedCall& read(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::spi::Port_t> port, CppUMockGen::Parameter<void *const> data, CppUMockGen::Parameter<const size_t> length);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace spi$ { namespace intf$ {
MockExpectedCall& transfer(CppUMockGen::Parameter<const mb::hw::spi::Port_t> port, CppUMockGen::Parameter<const void *const> tx, CppUMockGen::Parameter<void *const> rx, CppUMockGen::Parameter<const size_t> length);
MockExpectedCall& transfer(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::spi::Port_t> port, CppUMockGen::Parameter<const void *const> tx, CppUMockGen::Parameter<void *const> rx, CppUMockGen::Parameter<const size_t> length);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace spi$ { namespace intf$ {
MockExpectedCall& lock(CppUMockGen::Parameter<const mb::hw::spi::Port_t> port);
MockExpectedCall& lock(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::spi::Port_t> port);
} } } } }

namespace expect { namespace mb$ { namespace hw$ { namespace spi$ { namespace intf$ {
MockExpectedCall& unlock(CppUMockGen::Parameter<const mb::hw::spi::Port_t> port);
MockExpectedCall& unlock(unsigned int __numCalls__, CppUMockGen::Parameter<const mb::hw::spi::Port_t> port);
} } } } }

